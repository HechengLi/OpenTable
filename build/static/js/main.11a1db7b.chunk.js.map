{"version":3,"sources":["App.js","store/store.js","store/city/reducers.js","store/restaurant/reducers.js","serviceWorker.js","index.js","store/restaurant/actions.js","store/city/actions.js","components/Spinner/Spinner.js"],"names":["SelectCity","React","lazy","RestaurantList","App","className","fallback","Spinner","path","exact","component","rootReducer","combineReducers","city","state","action","type","SET_LOADING","Object","assign","loading","SET_CITIES","cities","SET_EXPIRY","expiry","restaurant","SET_INDEX","index","SET_RESTAURANTS","restaurants","Array","isArray","concat","map","CLEAR_RESTAURANTS","Date","setMinutes","getMinutes","SET_END_OF_LIST","eol","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Boolean","location","hostname","match","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","setLoading","clearRestaurants","getRestaurants","dispatch","fetch","response","json","data","appendRestaurants","setIndex","setExpiry","setEndOfList","length","getCities"],"mappings":"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","file":"static/js/main.11a1db7b.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './reset.scss';\nimport './App.scss';\n\nimport Spinner from './components/Spinner/Spinner'\n\nconst SelectCity = React.lazy(() => import(/* webpackChunkName: \"views/SelectCity\" */ './views/SelectCity/SelectCity'));\nconst RestaurantList = React.lazy(() => import(/* webpackChunkName: \"views/RestaurantList\" */ './views/RestaurantList/Restaurant'));\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <Router>\n        <Suspense fallback={<Spinner />}>\n          <Switch>\n            <Route path='/' exact component={SelectCity} />\n            <Route path='/:city' component={RestaurantList} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </main>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { cityReducer } from './city/reducers';\r\nimport { restaurantReducer } from './restaurant/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  city: cityReducer,\r\n  restaurant: restaurantReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport default function configureStore(preloadedState) {\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(applyMiddleware(thunkMiddleware))\r\n  );\r\n}","import { SET_LOADING, SET_CITIES, SET_EXPIRY } from './actions';\r\n\r\nexport function cityReducer(state = {}, action) {\r\n  // ignore actions for restaurants\r\n  if (action.city) return state;\r\n  switch(action.type) {\r\n    case SET_LOADING:\r\n      return Object.assign({}, state, { loading: action.loading });\r\n    case SET_CITIES:\r\n      return Object.assign({}, state, { cities: action.cities });\r\n    case SET_EXPIRY:\r\n      return Object.assign({}, state, { expiry: action.expiry });\r\n    default:\r\n      return state;\r\n  }\r\n}","import { SET_LOADING, SET_INDEX, SET_RESTAURANTS, CLEAR_RESTAURANTS, SET_EXPIRY, SET_END_OF_LIST } from './actions'\r\n\r\nexport function restaurantReducer(state = {}, action) {\r\n  switch(action.type) {\r\n    case SET_LOADING:\r\n      return Object.assign({}, state, { [action.city]: Object.assign({}, state[action.city], { loading: action.loading })});\r\n    case SET_INDEX:\r\n      return Object.assign({}, state, { [action.city]: Object.assign({}, state[action.city], { index: action.index }) });\r\n    case SET_RESTAURANTS:\r\n      let restaurants = [];\r\n      if (Array.isArray(state[action.city].restaurants)) {\r\n        // make a copy of each restaurant to free previous array\r\n        restaurants = restaurants.concat(state[action.city].restaurants.map(restaurant => Object.assign({}, restaurant)));\r\n      }\r\n      restaurants = restaurants.concat(action.restaurants.map(restaurant => Object.assign({}, restaurant)));\r\n      return Object.assign({}, state, { [action.city]: Object.assign({}, state[action.city], { restaurants })});\r\n    case CLEAR_RESTAURANTS:\r\n      return Object.assign({}, state, { [action.city]: Object.assign({}, state[action.city], { index: 1, restaurants: [], expiry: new Date().setMinutes(new Date().getMinutes() + 1) })});\r\n    case SET_EXPIRY:\r\n      return Object.assign({}, state, { [action.city]: Object.assign({}, state[action.city], { expiry: action.expiry })});\r\n    case SET_END_OF_LIST:\r\n      return Object.assign({}, state, { [action.city]: Object.assign({}, state[action.city], { eol: action.eol })});\r\n    default:\r\n      return state;\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'react-app-polyfill/ie11';\n\nimport App from './App';\nimport configureStore from './store/store'\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nconst store = configureStore({\n  city: {\n    loading: false,\n    cities: [],\n    expiry: 0\n  },\n  restaurant: {}\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <header className=\"header\">Open Table</header>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const SET_LOADING = 'SET_LOADING';\r\nexport const SET_INDEX = 'SET_INDEX';\r\nexport const SET_RESTAURANTS = 'SET_RESTAURANTS';\r\nexport const CLEAR_RESTAURANTS = 'CLEAR_RESTAURANTS';\r\nexport const SET_EXPIRY = 'SET_EXPIRY';\r\nexport const SET_END_OF_LIST = 'SET_END_OF_LIST';\r\n\r\nexport function setLoading(city, loading) {\r\n  return {\r\n    type: SET_LOADING,\r\n    loading,\r\n    city\r\n  }\r\n}\r\n\r\nexport function setIndex(city, index) {\r\n  return {\r\n    type: SET_INDEX,\r\n    index,\r\n    city\r\n  }\r\n}\r\n\r\nexport function appendRestaurants(city, restaurants) {\r\n  return {\r\n    type: SET_RESTAURANTS,\r\n    restaurants,\r\n    city\r\n  }\r\n}\r\n\r\nexport function clearRestaurants(city) {\r\n  return {\r\n    type: CLEAR_RESTAURANTS,\r\n    city\r\n  }\r\n}\r\n\r\nexport function setExpiry(city, expiry) {\r\n  return {\r\n    type: SET_EXPIRY,\r\n    expiry,\r\n    city\r\n  }\r\n}\r\n\r\nexport function setEndOfList(city, eol) {\r\n  return {\r\n    type: SET_END_OF_LIST,\r\n    eol,\r\n    city\r\n  }\r\n}\r\n\r\nexport function getRestaurants(city, index) {\r\n  return dispatch => {\r\n    dispatch(setLoading(city, true));\r\n    fetch(`http://opentable.herokuapp.com/api/restaurants?city=${city}&page=${index}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        dispatch(appendRestaurants(city, data.restaurants));\r\n        dispatch(setIndex(city, index+1));\r\n        // 5 minutes data expiry time\r\n        dispatch(setExpiry(city, new Date().setMinutes(new Date().getMinutes() + 1)));\r\n        dispatch(setEndOfList(city, data.restaurants.length === 0));\r\n        dispatch(setLoading(city, false));\r\n      });\r\n  }\r\n}","export const SET_LOADING = 'SET_LOADING';\r\nexport const SET_CITIES = 'SET_CITIES';\r\nexport const SET_EXPIRY = 'SET_EXPIRY';\r\n\r\nexport function setLoading(loading) {\r\n  return {\r\n    type: SET_LOADING,\r\n    loading\r\n  }\r\n}\r\n\r\nexport function setCities(cities) {\r\n  return {\r\n    type: SET_CITIES,\r\n    cities\r\n  }\r\n}\r\n\r\nexport function setExpiry(expiry) {\r\n  return {\r\n    type: SET_EXPIRY,\r\n    expiry\r\n  }\r\n}\r\n\r\nexport function getCities() {\r\n  return dispatch => {\r\n    dispatch(setLoading(true));\r\n    fetch('https://opentable.herokuapp.com/api/cities')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        dispatch(setCities(data.cities));\r\n        // 5 minutes data expiry time\r\n        dispatch(setExpiry(new Date().setMinutes(new Date().getMinutes() + 5)));\r\n        dispatch(setLoading(false));\r\n      });\r\n  }\r\n}","import React from 'react';\r\n\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-wrapper\">\r\n      <div className=\"spinner\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner"],"sourceRoot":""}